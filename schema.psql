-- PostgreSQL schema generated for model structs

CREATE TABLE IF NOT EXISTS agent_cards (
  agent_id varchar(255) PRIMARY KEY,
  agent_domain text,
  agent_address text,
  name varchar(255),
  description text,
  url text,
  icon_url varchar(255),
  version varchar(255),
  documentation_url text,
  feedback_data_uri text,
  chain_id varchar(255),
  namespace varchar(255),
  signature varchar(255),
  user_interface text
);

CREATE TABLE IF NOT EXISTS capabilities (
  agent_id varchar(255) PRIMARY KEY,
  streaming boolean,
  push_notifications boolean,
  state_transition_history boolean
);

CREATE TABLE IF NOT EXISTS skills (
  agent_id varchar(255) NOT NULL,
  id varchar(255) NOT NULL,
  name varchar(255),
  description text,
  PRIMARY KEY (agent_id, id)
);
CREATE INDEX IF NOT EXISTS idx_skills_agent_id ON skills(agent_id);

CREATE TABLE IF NOT EXISTS skill_tags (
  agent_id varchar(255) NOT NULL,
  id varchar(255) NOT NULL,
  tag varchar(255) NOT NULL,
  PRIMARY KEY (agent_id, id, tag)
);
CREATE INDEX IF NOT EXISTS idx_skill_tags_agent_id ON skill_tags(agent_id);

CREATE TABLE IF NOT EXISTS providers (
  agent_id varchar(255) NOT NULL,
  organization varchar(255) NOT NULL,
  url varchar(255)
,
  PRIMARY KEY (agent_id, organization)
);

CREATE TABLE IF NOT EXISTS trust_models (
  agent_id varchar(255) NOT NULL,
  trust_model varchar(255) NOT NULL,
  PRIMARY KEY (agent_id, trust_model)
);
CREATE INDEX IF NOT EXISTS idx_trust_models_agent_id ON trust_models(agent_id);

CREATE TABLE IF NOT EXISTS extensions (
  agent_id varchar(255) NOT NULL,
  uri text NOT NULL,
  required boolean,
  description text,
  PRIMARY KEY (agent_id, uri)
);
CREATE INDEX IF NOT EXISTS idx_extensions_agent_id ON extensions(agent_id);

CREATE TABLE IF NOT EXISTS agent_registries (
  agent_id varchar(255),
  agent_address varchar(255),
  agent_domain varchar(255),
  block_number bigint NOT NULL,
  index bigint NOT NULL,
  tx_hash varchar(255),
  timestamps bigint,
  inserted boolean,
  PRIMARY KEY (block_number, index)
);
CREATE INDEX IF NOT EXISTS idx_agent_registries_agent_id ON agent_registries(agent_id);
CREATE INDEX IF NOT EXISTS idx_agent_registries_agent_address ON agent_registries(agent_address);


CREATE TABLE IF NOT EXISTS agent_comments (
  comment_attestation_id char(66) NOT NULL PRIMARY KEY,
  commenter char(42) NOT NULL,
  agent_client_id varchar(255) NOT NULL,
  agent_server_id varchar(255) NOT NULL,
  comment_text text,
  score INTEGER,
  timestamps bigint NOT NULL,
  newest_comment boolean NOT NULL,
  block bigint NOT NULL,
  index bigint NOT NULL,
  tx_hash varchar(255) NOT NULL,
  is_authorized boolean NOT NULL DEFAULT FALSE
);

CREATE INDEX IF NOT EXISTS idx_agent_comments_id ON agent_comments(agent_server_id,agent_client_id);
CREATE INDEX IF NOT EXISTS idx_agent_comments_agent_server_id ON agent_comments(agent_server_id);
CREATE INDEX IF NOT EXISTS idx_agent_comments_new_comment ON agent_comments(new_comment);

Create Index IF NOT EXISTS idx_agent_comments_commenter ON agent_comments(commenter);

Create Index IF NOT EXISTS idx_agent_comments_block_index ON agent_comments(block,index);

Create Index IF NOT EXISTS idx_agent_comments_is_authorized ON agent_comments(is_authorized);

Alter table agent_cards add column score bigint not null default 0;
Alter table agent_cards add column comment_count bigint not null default 0;

Alter table agent_cards add column all_score bigint not null default 0;
Alter table agent_cards add column all_comment_count bigint not null default 0;

-- 使用 trigger 自动处理 agent_comments 的插入和 agent_cards 的分数统计，无需输入参数
-- 该触发器在 agent_comments 表插入新行时自动更新 agent_cards 的 score 和 comment_count

CREATE OR REPLACE FUNCTION update_agent_comment_and_score() RETURNS TRIGGER AS $$
DECLARE
    v_old_comment_id char(66);
    v_old_score INTEGER;
BEGIN
    if NEW.is_authorized = false then
        return NEW;
    end if;

    SELECT comment_attestation_id, score
      INTO v_old_comment_id, v_old_score
      FROM agent_comments
     WHERE agent_server_id = NEW.agent_server_id 
       AND agent_client_id = NEW.agent_client_id 
       AND is_authorized = TRUE
       AND newest_comment = TRUE
     LIMIT 2;

    IF v_old_comment_id IS NULL THEN
        -- 没有老评论：本条设置为 newest_comment=true，更新 agent_cards 分数和评论数
        NEW.newest_comment := TRUE;

        UPDATE agent_cards
           SET score = COALESCE(score,0) + COALESCE(NEW.score,0),
               comment_count = COALESCE(comment_count,0) + 1
        WHERE agent_id = NEW.agent_server_id;
        
        RETURN NEW;

    ELSIF FOUND THEN
        -- 检查是否存在超过一条记录
        IF (SELECT COUNT(*)
              FROM agent_comments 
             WHERE agent_server_id = NEW.agent_server_id 
               AND agent_client_id = NEW.agent_client_id 
               AND newest_comment = TRUE
             ) > 1 THEN
            RAISE EXCEPTION 'Multiple newest comments found for agent_server_id %, agent_client_id %', NEW.agent_server_id, NEW.agent_client_id;
        END IF;

        -- 有 1 条老评论，取消其“新”状态，本条为 newest_comment=true，分数做增量移除旧加新
        UPDATE agent_comments
           SET newest_comment = FALSE
         WHERE comment_attestation_id = v_old_comment_id;

        NEW.newest_comment := TRUE;

        UPDATE agent_cards
           SET score = COALESCE(score,0) - COALESCE(v_old_score,0) + COALESCE(NEW.score,0)
         WHERE agent_id = NEW.agent_server_id;

        RETURN NEW;
    END IF;
    -- 理论上不会走到这里，为安全加兜底
    RAISE EXCEPTION 'Unexpected case in update_agent_comment_and_score for agent_server_id %, agent_client_id %', NEW.agent_server_id, NEW.agent_client_id;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_update_agent_comment_and_score ON agent_comments;

CREATE TRIGGER trg_update_agent_comment_and_score
BEFORE INSERT ON agent_comments
FOR EACH ROW
EXECUTE FUNCTION update_agent_comment_and_score();

  
Create Table IF NOT EXISTS auth_feedbacks (
  auth_feedback_id varchar(255) NOT NULL,
  agent_client_id varchar(255) NOT NULL,
  agent_server_id varchar(255) NOT NULL,

  agent_client_address varchar(255) NOT NULL,
  agent_server_address varchar(255) NOT NULL,

  block_number bigint NOT NULL,
  index bigint NOT NULL,
  tx_hash varchar(255) NOT NULL,
  PRIMARY KEY (auth_feedback_id)
);

Create Index IF NOT EXISTS idx_auth_feedbacks_agent_client_id ON auth_feedbacks(agent_client_id);
Create Index IF NOT EXISTS idx_auth_feedbacks_agent_server_id ON auth_feedbacks(agent_server_id);
Create Index IF NOT EXISTS idx_auth_feedbacks_agent_client_address ON auth_feedbacks(agent_client_address);
Create Index IF NOT EXISTS idx_auth_feedbacks_agent_server_address ON auth_feedbacks(agent_server_address);
Create Index IF NOT EXISTS idx_auth_feedbacks_block_index ON auth_feedbacks(block_number,index);